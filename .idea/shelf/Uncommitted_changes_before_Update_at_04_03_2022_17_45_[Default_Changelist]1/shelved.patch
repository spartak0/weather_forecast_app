Index: app/src/main/java/com/example/weather/ui/forecast/ForecastFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weather.ui.forecast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.lifecycle.Observer;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.ActionOnlyNavDirections;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Parcelable;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport com.example.weather.R;\r\nimport com.example.weather.databinding.FragmentForecastBinding;\r\nimport com.example.weather.domain.model.Forecast.WeatherData;\r\nimport com.example.weather.ui.main.MainActivity;\r\nimport com.example.weather.ui.setLocationName.SetLocationNameFragment;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.function.Function;\r\nimport java.util.function.ToDoubleFunction;\r\nimport java.util.stream.Collectors;\r\n\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.functions.Consumer;\r\n\r\npublic class ForecastFragment extends Fragment {\r\n\r\n    List<Observable<Float>> currentTemp;\r\n    FragmentForecastBinding binding;\r\n    private ForecastViewModel viewModel;\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        binding = FragmentForecastBinding.inflate(inflater,container, false);\r\n        View view = binding.getRoot();\r\n        getActivity().setTitle(R.string.location);\r\n\r\n        return view;\r\n    }\r\n\r\n\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.N)\r\n    @SuppressLint(\"CheckResult\")\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        viewModel = new ViewModelProvider(this).get(ForecastViewModel.class);\r\n        currentTemp = new ArrayList<>();\r\n\r\n\r\n        binding.addBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Navigation.findNavController(view).navigate(R.id.action_forecastFragment_to_setLocationNameFragment);\r\n            }\r\n        });\r\n\r\n        ForecastItemAdapter adapter=new ForecastItemAdapter(new ArrayList<>(),currentTemp);\r\n        RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(binding.recycler.getContext());\r\n        binding.recycler.setLayoutManager(layoutManager);\r\n        binding.recycler.setAdapter(adapter);\r\n\r\n\r\n        viewModel.getLiveData().observe(this, new Observer<List<WeatherData>>() {\r\n            @SuppressLint(\"NotifyDataSetChanged\")\r\n            @Override\r\n            public void onChanged(List<WeatherData> weatherData) {\r\n                updateCurrentTemp(weatherData);\r\n                adapter.update(weatherData);\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"CheckResult\")\r\n    @RequiresApi(api = Build.VERSION_CODES.N)\r\n    void updateCurrentTemp(List<WeatherData> weatherData){\r\n        for(int i=0;i<weatherData.size();i++){\r\n            WeatherData tmp = weatherData.get(i);\r\n            currentTemp.add(viewModel.getCurrentWeatherByCoord(tmp.getLan(), tmp.getLon()));\r\n        }\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/weather/ui/forecast/ForecastFragment.java b/app/src/main/java/com/example/weather/ui/forecast/ForecastFragment.java
--- a/app/src/main/java/com/example/weather/ui/forecast/ForecastFragment.java	
+++ b/app/src/main/java/com/example/weather/ui/forecast/ForecastFragment.java	
@@ -29,6 +29,7 @@
 import com.example.weather.ui.main.MainActivity;
 import com.example.weather.ui.setLocationName.SetLocationNameFragment;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Function;
@@ -36,13 +37,15 @@
 import java.util.stream.Collectors;
 
 import io.reactivex.Observable;
+import io.reactivex.annotations.SchedulerSupport;
 import io.reactivex.functions.Consumer;
 
 public class ForecastFragment extends Fragment {
 
-    List<Observable<Float>> currentTemp;
+    List<Float> currentTemp;
     FragmentForecastBinding binding;
     private ForecastViewModel viewModel;
+    static float x;
 
     @Nullable
     @Override
@@ -83,7 +86,11 @@
             @SuppressLint("NotifyDataSetChanged")
             @Override
             public void onChanged(List<WeatherData> weatherData) {
-                updateCurrentTemp(weatherData);
+                try {
+                    updateCurrentTemp(weatherData);
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
                 adapter.update(weatherData);
             }
         });
@@ -91,10 +98,16 @@
 
     @SuppressLint("CheckResult")
     @RequiresApi(api = Build.VERSION_CODES.N)
-    void updateCurrentTemp(List<WeatherData> weatherData){
+    void updateCurrentTemp(List<WeatherData> weatherData) throws IOException {
+        currentTemp.clear();
         for(int i=0;i<weatherData.size();i++){
             WeatherData tmp = weatherData.get(i);
-            currentTemp.add(viewModel.getCurrentWeatherByCoord(tmp.getLan(), tmp.getLon()));
+            viewModel.getCurrentWeatherByCoord(tmp.getLan(), tmp.getLon()).subscribe(p -> {
+                x=p;
+            });
+
+            System.out.println(x);
+            currentTemp.add(x);
         }
     }
 
Index: app/src/main/java/com/example/weather/ui/forecast/ForecastViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weather.ui.forecast;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.os.Build;\r\n\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.ViewModel;\r\n\r\nimport com.example.weather.data.RepositoryImpl;\r\nimport com.example.weather.domain.model.Forecast.WeatherData;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\n\r\nimport io.reactivex.Completable;\r\nimport io.reactivex.CompletableOnSubscribe;\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.functions.Consumer;\r\nimport io.reactivex.schedulers.Schedulers;\r\n\r\n@RequiresApi(api = Build.VERSION_CODES.N)\r\npublic class ForecastViewModel extends ViewModel {\r\n\r\n\r\n    LiveData<List<WeatherData>> liveData = fetchAllSavedWeather();\r\n\r\n    public LiveData<List<WeatherData>> getLiveData() {\r\n        return liveData;\r\n    }\r\n\r\n    public LiveData<List<WeatherData>> fetchAllSavedWeather(){\r\n        return RepositoryImpl.getInstance().getAllWeather();\r\n    }\r\n\r\n    @SuppressLint(\"CheckResult\")\r\n    public Observable<Float> getCurrentWeatherByCoord(double lat, double lon){\r\n       return RepositoryImpl.getInstance().getCurrentWeatherDataByCoord(\"\"+lat,\"\"+lon, \"metric\")\r\n               .subscribeOn(Schedulers.io())\r\n               .observeOn(AndroidSchedulers.mainThread());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/weather/ui/forecast/ForecastViewModel.java b/app/src/main/java/com/example/weather/ui/forecast/ForecastViewModel.java
--- a/app/src/main/java/com/example/weather/ui/forecast/ForecastViewModel.java	
+++ b/app/src/main/java/com/example/weather/ui/forecast/ForecastViewModel.java	
@@ -3,6 +3,7 @@
 import android.annotation.SuppressLint;
 import android.os.Build;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.RequiresApi;
 import androidx.lifecycle.LiveData;
 import androidx.lifecycle.ViewModel;
@@ -10,14 +11,21 @@
 import com.example.weather.data.RepositoryImpl;
 import com.example.weather.domain.model.Forecast.WeatherData;
 
+import java.io.IOException;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.stream.Collectors;
 
 import io.reactivex.Completable;
 import io.reactivex.CompletableOnSubscribe;
 import io.reactivex.Observable;
+import io.reactivex.ObservableSource;
+import io.reactivex.Single;
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.functions.Consumer;
+import io.reactivex.functions.Function;
+import io.reactivex.internal.operators.observable.BlockingObservableLatest;
 import io.reactivex.schedulers.Schedulers;
 
 @RequiresApi(api = Build.VERSION_CODES.N)
@@ -30,14 +38,19 @@
         return liveData;
     }
 
-    public LiveData<List<WeatherData>> fetchAllSavedWeather(){
+    public LiveData<List<WeatherData>> fetchAllSavedWeather() {
         return RepositoryImpl.getInstance().getAllWeather();
     }
 
     @SuppressLint("CheckResult")
-    public Observable<Float> getCurrentWeatherByCoord(double lat, double lon){
-       return RepositoryImpl.getInstance().getCurrentWeatherDataByCoord(""+lat,""+lon, "metric")
-               .subscribeOn(Schedulers.io())
-               .observeOn(AndroidSchedulers.mainThread());
+    public Observable<Float> getCurrentWeatherByCoord(double lat, double lon) throws IOException {
+        Observable<Float> floatObservable = RepositoryImpl.getInstance().getCurrentWeatherDataByCoord("" + lat, "" + lon, "metric")
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread());
+        return floatObservable;
+    }
+
+    public Float getCurrentWeatherByCoordC(double lat, double lon) throws IOException {
+        return RepositoryImpl.getInstance().getCurrentWeatherDataByCoordCall("" + lat, "" + lon, "metric");
     }
 }
Index: app/src/main/java/com/example/weather/data/RepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weather.data;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.os.Build;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.Transformations;\r\n\r\nimport com.example.weather.data.db.database.WeatherDatabase;\r\nimport com.example.weather.data.db.entity.WeatherEntity;\r\nimport com.example.weather.data.network.api.ForecastApi;\r\nimport com.example.weather.domain.mapper.DailyMapper;\r\nimport com.example.weather.domain.mapper.WeatherMapper;\r\nimport com.example.weather.domain.model.Forecast.WeatherData;\r\nimport com.example.weather.domain.Repository;\r\nimport com.example.weather.utils.Constant;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.functions.Function;\r\n\r\npublic class RepositoryImpl implements Repository {\r\n    final WeatherMapper weatherMapper= new WeatherMapper();\r\n    final DailyMapper dailyMapper= new DailyMapper();\r\n    Context context;\r\n    @SuppressLint(\"StaticFieldLeak\")\r\n    static RepositoryImpl instance;\r\n\r\n\r\n    public RepositoryImpl(Context context) {\r\n        this.context = context;\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.N)\r\n    @Override\r\n    public LiveData<List<WeatherData>> getAllWeather() {\r\n        return Transformations.map(WeatherDatabase.getInstance(context).weatherDao().getAllWeather(),\r\n                x -> {\r\n            return x.stream().map(weatherMapper::toDomain).collect(Collectors.toList());\r\n                });\r\n    }\r\n\r\n    @Override\r\n    public WeatherData getWeatherById(int id) {\r\n        WeatherEntity tmp = WeatherDatabase.getInstance(context).weatherDao().getWeatherById(id);\r\n        return weatherMapper.toDomain( tmp);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void addWeather(WeatherData weatherData) {\r\n        WeatherDatabase.getInstance(context).weatherDao().addWeather(weatherMapper.fromDomain(weatherData));\r\n    }\r\n\r\n\r\n    @Override\r\n    public void deleteWeather(WeatherData weatherData) {\r\n        WeatherDatabase.getInstance(context).weatherDao().deleteWeather(weatherMapper.fromDomain(weatherData));\r\n    }\r\n\r\n    @Override\r\n    public void updateWeather(WeatherData weatherData) {\r\n        WeatherDatabase.getInstance(context).weatherDao().updateWeather(weatherMapper.fromDomain(weatherData));\r\n    }\r\n\r\n    @Override\r\n    public Observable<Float> getCurrentWeatherDataByCoord(String lat, String lon, String units) {\r\n        Observable<Float> floatObservable= ForecastApi.Instance.getForecastApi().getWeatherDataByCoord(lat, lon, units).map(\r\n                new Function<WeatherEntity, Float>() {\r\n                    @Override\r\n                    public Float apply(@NonNull WeatherEntity weatherEntity) throws Exception {\r\n                        return weatherEntity.getCurrent().getTemp();\r\n                    }\r\n                }\r\n        );\r\n        return floatObservable;\r\n    }\r\n\r\n    @Override\r\n    public Observable<HashMap<String, String>> getDailyWeatherDataByCoord(String lat, String lon, String units) {\r\n        Observable<HashMap<String, String>> floatObservable= ForecastApi.Instance.getForecastApi().getWeatherDataByCoord(lat, lon, units).map(\r\n                new Function<WeatherEntity, HashMap<String, String>>() {\r\n                    @Override\r\n                    public HashMap<String, String> apply(@NonNull WeatherEntity weatherEntity) throws Exception {\r\n                        return dailyMapper.toDomain(weatherEntity);\r\n                    }\r\n                });\r\n        return floatObservable;\r\n    }\r\n\r\n\r\n    public static RepositoryImpl getInstance() {\r\n        return instance;\r\n    }\r\n    public static void init(Context context) {\r\n        instance= new RepositoryImpl(context);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/weather/data/RepositoryImpl.java b/app/src/main/java/com/example/weather/data/RepositoryImpl.java
--- a/app/src/main/java/com/example/weather/data/RepositoryImpl.java	
+++ b/app/src/main/java/com/example/weather/data/RepositoryImpl.java	
@@ -2,6 +2,7 @@
 
 import android.annotation.SuppressLint;
 import android.content.Context;
+import android.os.AsyncTask;
 import android.os.Build;
 
 import androidx.annotation.NonNull;
@@ -16,14 +17,19 @@
 import com.example.weather.domain.mapper.WeatherMapper;
 import com.example.weather.domain.model.Forecast.WeatherData;
 import com.example.weather.domain.Repository;
-import com.example.weather.utils.Constant;
 
+import java.io.IOException;
 import java.util.HashMap;
 import java.util.List;
 import java.util.stream.Collectors;
 
 import io.reactivex.Observable;
+import io.reactivex.Single;
 import io.reactivex.functions.Function;
+import kotlin.Triple;
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
 
 public class RepositoryImpl implements Repository {
     final WeatherMapper weatherMapper= new WeatherMapper();
@@ -32,6 +38,8 @@
     @SuppressLint("StaticFieldLeak")
     static RepositoryImpl instance;
 
+    static float x;
+
 
     public RepositoryImpl(Context context) {
         this.context = context;
@@ -70,8 +78,8 @@
     }
 
     @Override
-    public Observable<Float> getCurrentWeatherDataByCoord(String lat, String lon, String units) {
-        Observable<Float> floatObservable= ForecastApi.Instance.getForecastApi().getWeatherDataByCoord(lat, lon, units).map(
+    public Observable<Float> getCurrentWeatherDataByCoord(String lat, String lon, String units){
+        return ForecastApi.Instance.getForecastApi().getWeatherDataByCoord(lat, lon, units).map(
                 new Function<WeatherEntity, Float>() {
                     @Override
                     public Float apply(@NonNull WeatherEntity weatherEntity) throws Exception {
@@ -79,7 +87,22 @@
                     }
                 }
         );
-        return floatObservable;
+    }
+
+    @Override
+    public Float getCurrentWeatherDataByCoordCall(String lat, String lon, String units) throws IOException {
+        ForecastApi.Instance.getForecastApi().getWeatherDataByCoordC(lat,lon,units).enqueue(new Callback<WeatherEntity>() {
+            @Override
+            public void onResponse(Call<WeatherEntity> call, Response<WeatherEntity> response) {
+                 x =response.body().getCurrent().getTemp();
+            }
+
+            @Override
+            public void onFailure(Call<WeatherEntity> call, Throwable t) {
+
+            }
+        });
+        return x;
     }
 
     @Override
@@ -101,7 +124,4 @@
     public static void init(Context context) {
         instance= new RepositoryImpl(context);
     }
-
-
-
 }
Index: app/src/main/java/com/example/weather/domain/Repository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weather.domain;\r\n\r\nimport androidx.lifecycle.LiveData;\r\n\r\nimport com.example.weather.domain.model.Forecast.WeatherData;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport io.reactivex.Observable;\r\n\r\npublic interface Repository {\r\n\r\n    LiveData<List<WeatherData>> getAllWeather();\r\n\r\n    WeatherData getWeatherById(int id);\r\n\r\n    void addWeather(WeatherData weatherData);\r\n\r\n    void deleteWeather(WeatherData weatherData);\r\n\r\n    void updateWeather(WeatherData weatherData);\r\n\r\n    Observable<Float> getCurrentWeatherDataByCoord(String lat, String lon, String units);\r\n\r\n    Observable<HashMap<String,String>> getDailyWeatherDataByCoord(String lat, String lon, String units);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/weather/domain/Repository.java b/app/src/main/java/com/example/weather/domain/Repository.java
--- a/app/src/main/java/com/example/weather/domain/Repository.java	
+++ b/app/src/main/java/com/example/weather/domain/Repository.java	
@@ -4,10 +4,13 @@
 
 import com.example.weather.domain.model.Forecast.WeatherData;
 
+import java.io.IOException;
 import java.util.HashMap;
 import java.util.List;
 
 import io.reactivex.Observable;
+import io.reactivex.Single;
+import retrofit2.Call;
 
 public interface Repository {
 
@@ -23,6 +26,8 @@
 
     Observable<Float> getCurrentWeatherDataByCoord(String lat, String lon, String units);
 
+    Float getCurrentWeatherDataByCoordCall(String lat, String lon, String units) throws IOException;
+
     Observable<HashMap<String,String>> getDailyWeatherDataByCoord(String lat, String lon, String units);
 
 }
Index: app/src/main/java/com/example/weather/data/network/api/ForecastApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weather.data.network.api;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.example.weather.data.db.entity.WeatherEntity;\r\nimport com.example.weather.utils.Constant;\r\n\r\nimport java.io.IOException;\r\n\r\nimport io.reactivex.Observable;\r\nimport okhttp3.HttpUrl;\r\nimport okhttp3.Interceptor;\r\nimport okhttp3.OkHttpClient;\r\nimport okhttp3.Request;\r\nimport okhttp3.Response;\r\nimport retrofit2.Retrofit;\r\nimport retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;\r\nimport retrofit2.converter.gson.GsonConverterFactory;\r\nimport retrofit2.http.GET;\r\nimport retrofit2.http.Query;\r\n\r\npublic interface ForecastApi {\r\n\r\n    @GET(\"data/2.5/onecall\")\r\n    Observable<WeatherEntity> getWeatherDataByCoord(@Query(\"lat\") String lat, @Query(\"lon\") String lon, @Query(\"units\")String units);\r\n\r\n    class Instance{\r\n        private static Retrofit getRetrofit(){\r\n            //HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();\r\n            //httpLoggingInterceptor.level(HttpLoggingInterceptor.Level.BODY);\r\n\r\n            OkHttpClient.Builder okHttpClientBuilder = new OkHttpClient.Builder()\r\n                    .addInterceptor(new Interceptor() {\r\n                        @NonNull\r\n                        @Override\r\n                        public Response intercept(@NonNull Chain chain) throws IOException {\r\n                            Request.Builder request = chain.request().newBuilder();\r\n                            HttpUrl originalHttpUrl = chain.request().url();\r\n                            HttpUrl newUrl = originalHttpUrl.newBuilder().addQueryParameter(\"appid\", Constant.apiKey)\r\n                                    .addQueryParameter(\"exclude\", \"minutely,hourly,alerts\").build();\r\n                            request.url(newUrl);\r\n                            Response response = chain.proceed(request.build());\r\n                            return response;\r\n                        }\r\n                    });\r\n\r\n            Retrofit.Builder retrofitBuilder = new Retrofit.Builder();\r\n            retrofitBuilder.baseUrl(Constant.BASE_URL)\r\n                    .addConverterFactory(GsonConverterFactory.create())\r\n                    .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\r\n                    .client(okHttpClientBuilder.build());\r\n            return retrofitBuilder.build();\r\n\r\n        }\r\n        public static ForecastApi getForecastApi(){\r\n            return getRetrofit().create(ForecastApi.class);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/weather/data/network/api/ForecastApi.java b/app/src/main/java/com/example/weather/data/network/api/ForecastApi.java
--- a/app/src/main/java/com/example/weather/data/network/api/ForecastApi.java	
+++ b/app/src/main/java/com/example/weather/data/network/api/ForecastApi.java	
@@ -8,11 +8,13 @@
 import java.io.IOException;
 
 import io.reactivex.Observable;
+import io.reactivex.Single;
 import okhttp3.HttpUrl;
 import okhttp3.Interceptor;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
+import retrofit2.Call;
 import retrofit2.Retrofit;
 import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
 import retrofit2.converter.gson.GsonConverterFactory;
@@ -24,6 +26,12 @@
     @GET("data/2.5/onecall")
     Observable<WeatherEntity> getWeatherDataByCoord(@Query("lat") String lat, @Query("lon") String lon, @Query("units")String units);
 
+    @GET("data/2.5/onecall")
+    Single<WeatherEntity> getWeatherDataByCoordF(@Query("lat") String lat, @Query("lon") String lon, @Query("units")String units);
+
+    @GET("data/2.5/onecall")
+    Call<WeatherEntity> getWeatherDataByCoordC(@Query("lat") String lat, @Query("lon") String lon, @Query("units")String units);
+
     class Instance{
         private static Retrofit getRetrofit(){
             //HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();
